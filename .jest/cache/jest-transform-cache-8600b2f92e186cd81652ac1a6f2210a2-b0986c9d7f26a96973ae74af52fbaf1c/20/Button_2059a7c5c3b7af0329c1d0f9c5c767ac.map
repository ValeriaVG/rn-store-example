{"version":3,"sources":["/Users/valeriavianagusmao/git/store/src/components/Button.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAUA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,SAAwB,MAAxB,OAWE;AAAA,MAVA,QAUA,QAVA,QAUA;AAAA,MATA,IASA,QATA,IASA;AAAA,MARA,OAQA,QARA,OAQA;AAAA,MAPA,KAOA,QAPA,KAOA;AAAA,MANA,QAMA,QANA,QAMA;AACA,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,IAAI,SAAT,CAA1B;;AACA,MAAI,QAAJ,EAAc;AACZ,WACE,oBAAC,cAAD,CAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAAC,MAAM,CAAC,MAAR,EAAgB,KAAhB,EAAuB;AAAC,QAAA,OAAO,EAAE;AAAV,OAAvB;AAAb,OACE,oBAAC,cAAD,CAAC,IAAD;AAAM,MAAA,KAAK,EAAE,MAAM,CAAC;AAApB,OAAiC,QAAjC,CADF,CADF;AAKD;;AACD,SACE,oBAAC,cAAD,CAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAAC,MAAM,CAAC,MAAR,EAAgB,KAAhB,CAAzB;AAAiD,IAAA,OAAO,EAAE;AAA1D,KACE,oBAAC,cAAD,CAAC,IAAD;AAAM,IAAA,KAAK,EAAE,MAAM,CAAC;AAApB,KAAiC,QAAjC,CADF,CADF;AAKD;;AAzBD,OAAA,CAAA,OAAA,GAAA,MAAA;AA2BA,IAAM,aAAa,GAAG,cAAA,CAAA,UAAA,CAAW,MAAX,CAAkB;AACtC,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE,MADD;AAEN,IAAA,eAAe,EAAE,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa,OAFxB;AAGN,IAAA,YAAY,EAAE,CAHR;AAIN,IAAA,iBAAiB,EAAE,EAJb;AAKN,IAAA,eAAe,EAAE;AALX,GAD8B;AAQtC,EAAA,UAAU,EAAE;AACV,IAAA,SAAS,EAAE,QADD;AAEV,IAAA,KAAK,EAAE,OAFG;AAIV,IAAA,QAAQ,EAAE;AAJA;AAR0B,CAAlB,CAAtB;AAgBA,IAAM,SAAS,GAAG,cAAA,CAAA,UAAA,CAAW,MAAX,CAAkB;AAClC,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE,MADD;AAEN,IAAA,eAAe,EAAE,aAFX;AAGN,IAAA,YAAY,EAAE,CAHR;AAIN,IAAA,WAAW,EAAE,CAJP;AAKN,IAAA,WAAW,EAAE,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa,IALpB;AAMN,IAAA,iBAAiB,EAAE,EANb;AAON,IAAA,eAAe,EAAE;AAPX,GAD0B;AAUlC,EAAA,UAAU,EAAE;AACV,IAAA,SAAS,EAAE,QADD;AAEV,IAAA,QAAQ,EAAE,EAFA;AAGV,IAAA,KAAK,EAAE,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa;AAHV;AAVsB,CAAlB,CAAlB;AAiBA,IAAM,WAAW,GAAG;AAClB,EAAA,OAAO,EAAE,aADS;AAElB,EAAA,GAAG,EAAE;AAFa,CAApB","sourcesContent":["import React, {PropsWithChildren} from 'react';\nimport {\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  GestureResponderEvent,\n  StyleProp,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport theme from 'theme';\nexport default function Button({\n  children,\n  type,\n  onPress,\n  style,\n  disabled,\n}: PropsWithChildren<{\n  type?: 'primary' | 'alt';\n  onPress?: (event: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  disabled?: Boolean;\n}>) {\n  const styles = buttonTypes[type || 'primary'];\n  if (disabled) {\n    return (\n      <View style={[styles.button, style, {opacity: 0.25}]}>\n        <Text style={styles.buttonText}>{children}</Text>\n      </View>\n    );\n  }\n  return (\n    <TouchableOpacity style={[styles.button, style]} onPress={onPress}>\n      <Text style={styles.buttonText}>{children}</Text>\n    </TouchableOpacity>\n  );\n}\n\nconst primaryStyles = StyleSheet.create({\n  button: {\n    width: '100%',\n    backgroundColor: theme.colors.primary,\n    borderRadius: 4,\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n\n    fontSize: 16,\n  },\n});\n\nconst altStyles = StyleSheet.create({\n  button: {\n    width: '100%',\n    backgroundColor: 'transparent',\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: theme.colors.text,\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n  },\n  buttonText: {\n    textAlign: 'center',\n    fontSize: 16,\n    color: theme.colors.text,\n  },\n});\n\nconst buttonTypes = {\n  primary: primaryStyles,\n  alt: altStyles,\n};\n"]}