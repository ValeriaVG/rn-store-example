d384b4632e473a3c72fa53efa5c0d13e
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = extractResponder;var responderKeys = Object.keys(require("react-native").PanResponder.create({}).panHandlers);var numResponderKeys = responderKeys.length;function extractResponder(o, props, ref) {var onPress = props.onPress,disabled = props.disabled,onPressIn = props.onPressIn,onPressOut = props.onPressOut,onLongPress = props.onLongPress,delayPressIn = props.delayPressIn,delayPressOut = props.delayPressOut,delayLongPress = props.delayLongPress,pointerEvents = props.pointerEvents;var responsible = false;for (var i = 0; i < numResponderKeys; i++) {var key = responderKeys[i];var value = props[key];if (value) {responsible = true;o[key] = value;}}if (pointerEvents) {o.pointerEvents = pointerEvents;}var hasTouchableProperty = disabled != null || onPress || onPressIn || onPressOut || onLongPress || delayPressIn || delayPressOut || delayLongPress;if (hasTouchableProperty) {responsible = true;o.onResponderMove = ref.touchableHandleResponderMove;o.onResponderGrant = ref.touchableHandleResponderGrant;o.onResponderRelease = ref.touchableHandleResponderRelease;o.onResponderTerminate = ref.touchableHandleResponderTerminate;o.onStartShouldSetResponder = ref.touchableHandleStartShouldSetResponder;o.onResponderTerminationRequest = ref.touchableHandleResponderTerminationRequest;}if (responsible) {o.responsible = true;}}