3ff69fb3e4489552d74bca09052fd146
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createNativeWrapper;var _react = _interopRequireDefault(require("react"));

var _NativeViewGestureHandler = _interopRequireDefault(require("./NativeViewGestureHandler"));var _jsxFileName = "/Users/valeriavianagusmao/git/store/node_modules/react-native-gesture-handler/createNativeWrapper.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var NATIVE_WRAPPER_PROPS_FILTER = [
'id',
'minPointers',
'enabled',
'waitFor',
'simultaneousHandlers',
'shouldCancelWhenOutside',
'hitSlop',
'onGestureEvent',
'onHandlerStateChange',
'onBegan',
'onFailed',
'onCancelled',
'onActivated',
'onEnded',
'shouldActivateOnStart',
'disallowInterruption',
'onGestureHandlerEvent',
'onGestureHandlerStateChange'];


function createNativeWrapper(Component) {var _this = this;var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ComponentWrapper = _react.default.forwardRef(function (props, ref) {

    var gestureHandlerProps = Object.keys(props).reduce(
    function (res, key) {
      if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {
        res[key] = props[key];
      }
      return res;
    }, _objectSpread({},
    config));

    return (
      _react.default.createElement(_NativeViewGestureHandler.default, _extends({}, gestureHandlerProps, { __self: _this, __source: { fileName: _jsxFileName, lineNumber: 46, columnNumber: 7 } }),
      _react.default.createElement(Component, _extends({}, props, { ref: ref, __self: _this, __source: { fileName: _jsxFileName, lineNumber: 47, columnNumber: 9 } }))));


  });

  ComponentWrapper.propTypes = _objectSpread({},
  Component.propTypes);

  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';

  return ComponentWrapper;
}