3b9e00415fd5d7607ae114e9d521717b
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = BottomTabBar;

var _react = _interopRequireDefault(require("react"));







var _BottomTabItem = _interopRequireDefault(require("./BottomTabItem"));

var _useWindowDimensions = _interopRequireDefault(require("../utils/useWindowDimensions"));

var _useIsKeyboardShown = _interopRequireDefault(require("../utils/useIsKeyboardShown"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var DEFAULT_TABBAR_HEIGHT = 49;
var COMPACT_TABBAR_HEIGHT = 32;
var DEFAULT_MAX_TAB_ITEM_WIDTH = 125;
var useNativeDriver = require("react-native").Platform.OS !== 'web';

function BottomTabBar(_ref)

















{var state = _ref.state,navigation = _ref.navigation,descriptors = _ref.descriptors,activeBackgroundColor = _ref.activeBackgroundColor,activeTintColor = _ref.activeTintColor,_ref$adaptive = _ref.adaptive,adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,allowFontScaling = _ref.allowFontScaling,inactiveBackgroundColor = _ref.inactiveBackgroundColor,inactiveTintColor = _ref.inactiveTintColor,_ref$keyboardHidesTab = _ref.keyboardHidesTabBar,keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,labelPosition = _ref.labelPosition,labelStyle = _ref.labelStyle,iconStyle = _ref.iconStyle,safeAreaInsets = _ref.safeAreaInsets,showLabel = _ref.showLabel,style = _ref.style,tabStyle = _ref.tabStyle;
  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;var _ref2 =



  (0, require("@react-navigation/native").useTheme)(),colors = _ref2.colors;
  var buildLink = (0, require("@react-navigation/native").useLinkBuilder)();
  var focusedRoute = state.routes[state.index];
  var focusedDescriptor = descriptors[focusedRoute.key];
  var focusedOptions = focusedDescriptor.options;
  var dimensions = (0, _useWindowDimensions.default)();
  var isKeyboardShown = (0, _useIsKeyboardShown.default)();
  var shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);

  var visibilityAnimationConfigRef = _react.default.useRef(focusedOptions.tabBarVisibilityAnimationConfig);

  _react.default.useEffect(function () {
    visibilityAnimationConfigRef.current = focusedOptions.tabBarVisibilityAnimationConfig;
  });var _react$default$useSta =

  _react.default.useState(!shouldShowTabBar),_react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),isTabBarHidden = _react$default$useSta2[0],setIsTabBarHidden = _react$default$useSta2[1];var _react$default$useSta3 =

  _react.default.useState(function () {return new (require("react-native").Animated.Value)(shouldShowTabBar ? 1 : 0);}),_react$default$useSta4 = _slicedToArray(_react$default$useSta3, 1),visible = _react$default$useSta4[0];

  _react.default.useEffect(function () {
    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;

    if (shouldShowTabBar) {
      var _visibilityAnimationC, _visibilityAnimationC2;

      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? require("react-native").Animated.spring : require("react-native").Animated.timing;
      animation(visible, _objectSpread({
        toValue: 1,
        useNativeDriver: useNativeDriver,
        duration: 250 },
      visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).
      start(function (_ref3)

      {var finished = _ref3.finished;
        if (finished) {
          setIsTabBarHidden(false);
        }
      });
    } else {
      var _visibilityAnimationC3, _visibilityAnimationC4;

      setIsTabBarHidden(true);
      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? require("react-native").Animated.spring : require("react-native").Animated.timing;
      _animation(visible, _objectSpread({
        toValue: 0,
        useNativeDriver: useNativeDriver,
        duration: 200 },
      visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).
      start();
    }
  }, [visible, shouldShowTabBar]);var _react$default$useSta5 =

  _react.default.useState({
    height: 0,
    width: dimensions.width }),_react$default$useSta6 = _slicedToArray(_react$default$useSta5, 2),layout = _react$default$useSta6[0],setLayout = _react$default$useSta6[1];


  var isLandscape = function isLandscape() {return dimensions.width > dimensions.height;};

  var handleLayout = function handleLayout(e) {var _e$nativeEvent$layout =



    e.nativeEvent.layout,height = _e$nativeEvent$layout.height,width = _e$nativeEvent$layout.width;
    setLayout(function (layout) {
      if (height === layout.height && width === layout.width) {
        return layout;
      } else {
        return {
          height: height,
          width: width };

      }
    });
  };var


  routes =
  state.routes;

  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {
    if (labelPosition) {
      return labelPosition === 'beside-icon';
    }

    if (!adaptive) {
      return false;
    }

    if (layout.width >= 768) {

      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;

      var flattenedStyle = require("react-native").StyleSheet.flatten(tabStyle);

      if (flattenedStyle) {
        if (typeof flattenedStyle.width === 'number') {
          maxTabItemWidth = flattenedStyle.width;
        } else if (typeof flattenedStyle.maxWidth === 'number') {
          maxTabItemWidth = flattenedStyle.maxWidth;
        }
      }

      return routes.length * maxTabItemWidth <= layout.width;
    } else {
      return isLandscape();
    }
  };

  var defaultInsets = (0, require("react-native-safe-area-context").useSafeArea)();
  var insets = {
    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,
    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,
    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,
    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left };

  var paddingBottom = Math.max(insets.bottom - require("react-native").Platform.select({
    ios: 4,
    default: 0 }),
  0);

  var getDefaultTabBarHeight = function getDefaultTabBarHeight() {
    if (require("react-native").Platform.OS === 'ios' && !require("react-native").Platform.isPad && isLandscape() && shouldUseHorizontalLabels()) {
      return COMPACT_TABBAR_HEIGHT;
    }

    return DEFAULT_TABBAR_HEIGHT;
  };

  return _react.default.createElement(require("react-native").Animated.View, {
    style: [styles.tabBar, {
      backgroundColor: colors.card,
      borderTopColor: colors.border },
    {
      transform: [{
        translateY: visible.interpolate({
          inputRange: [0, 1],
          outputRange: [layout.height + paddingBottom + require("react-native").StyleSheet.hairlineWidth, 0] }) }],




      position: isTabBarHidden ? 'absolute' : null },
    {
      height: getDefaultTabBarHeight() + paddingBottom,
      paddingBottom: paddingBottom,
      paddingHorizontal: Math.max(insets.left, insets.right) },
    style],
    pointerEvents: isTabBarHidden ? 'none' : 'auto' },
  _react.default.createElement(require("react-native").View, {
    style: styles.content,
    onLayout: handleLayout },
  routes.map(function (route, index) {
    var focused = index === state.index;var

    options =
    descriptors[route.key].options;

    var onPress = function onPress() {
      var event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true });


      if (!focused && !event.defaultPrevented) {
        navigation.dispatch(_objectSpread(_objectSpread({}, require("@react-navigation/native").CommonActions.navigate(route.name)), {}, {
          target: state.key }));

      }
    };

    var onLongPress = function onLongPress() {
      navigation.emit({
        type: 'tabLongPress',
        target: route.key });

    };

    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;
    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? "".concat(label, ", tab, ").concat(index + 1, " of ").concat(routes.length) : undefined;
    return _react.default.createElement(require("@react-navigation/native").NavigationContext.Provider, {
      key: route.key,
      value: descriptors[route.key].navigation },
    _react.default.createElement(require("@react-navigation/native").NavigationRouteContext.Provider, {
      value: route },
    _react.default.createElement(_BottomTabItem.default, {
      route: route,
      focused: focused,
      horizontal: shouldUseHorizontalLabels(),
      onPress: onPress,
      onLongPress: onLongPress,
      accessibilityLabel: accessibilityLabel,
      to: buildLink(route.name, route.params),
      testID: options.tabBarTestID,
      allowFontScaling: allowFontScaling,
      activeTintColor: activeTintColor,
      inactiveTintColor: inactiveTintColor,
      activeBackgroundColor: activeBackgroundColor,
      inactiveBackgroundColor: inactiveBackgroundColor,
      button: options.tabBarButton,
      icon: options.tabBarIcon,
      badge: options.tabBarBadge,
      label: label,
      showLabel: showLabel,
      labelStyle: labelStyle,
      iconStyle: iconStyle,
      style: tabStyle })));

  })));
}

var styles = require("react-native").StyleSheet.create({
  tabBar: {
    left: 0,
    right: 0,
    bottom: 0,
    borderTopWidth: require("react-native").StyleSheet.hairlineWidth,
    elevation: 8 },

  content: {
    flex: 1,
    flexDirection: 'row' } });