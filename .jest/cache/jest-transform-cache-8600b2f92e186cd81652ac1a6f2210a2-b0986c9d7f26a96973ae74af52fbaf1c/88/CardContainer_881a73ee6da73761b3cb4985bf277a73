8d67e1f1378a293ed10384455a0bdba1
"use strict";function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _Card = _interopRequireDefault(require("./Card"));

var _HeaderHeightContext = _interopRequireDefault(require("../../utils/HeaderHeightContext"));

var _HeaderShownContext = _interopRequireDefault(require("../../utils/HeaderShownContext"));

var _PreviousSceneContext = _interopRequireDefault(require("../../utils/PreviousSceneContext"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

var EPSILON = 0.1;

function CardContainer(_ref)










































{var active = _ref.active,cardOverlay = _ref.cardOverlay,cardOverlayEnabled = _ref.cardOverlayEnabled,cardShadowEnabled = _ref.cardShadowEnabled,cardStyle = _ref.cardStyle,cardStyleInterpolator = _ref.cardStyleInterpolator,closing = _ref.closing,gesture = _ref.gesture,focused = _ref.focused,gestureDirection = _ref.gestureDirection,gestureEnabled = _ref.gestureEnabled,gestureResponseDistance = _ref.gestureResponseDistance,gestureVelocityImpact = _ref.gestureVelocityImpact,getPreviousScene = _ref.getPreviousScene,getFocusedRoute = _ref.getFocusedRoute,mode = _ref.mode,headerMode = _ref.headerMode,headerShown = _ref.headerShown,headerStyleInterpolator = _ref.headerStyleInterpolator,hasAbsoluteHeader = _ref.hasAbsoluteHeader,headerHeight = _ref.headerHeight,onHeaderHeightChange = _ref.onHeaderHeightChange,index = _ref.index,layout = _ref.layout,onCloseRoute = _ref.onCloseRoute,onOpenRoute = _ref.onOpenRoute,onPageChangeCancel = _ref.onPageChangeCancel,onPageChangeConfirm = _ref.onPageChangeConfirm,onPageChangeStart = _ref.onPageChangeStart,onGestureCancel = _ref.onGestureCancel,onGestureEnd = _ref.onGestureEnd,onGestureStart = _ref.onGestureStart,onTransitionEnd = _ref.onTransitionEnd,onTransitionStart = _ref.onTransitionStart,renderHeader = _ref.renderHeader,renderScene = _ref.renderScene,safeAreaInsetBottom = _ref.safeAreaInsetBottom,safeAreaInsetLeft = _ref.safeAreaInsetLeft,safeAreaInsetRight = _ref.safeAreaInsetRight,safeAreaInsetTop = _ref.safeAreaInsetTop,scene = _ref.scene,transitionSpec = _ref.transitionSpec;
  React.useEffect(function () {
    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();
  }, [active, onPageChangeConfirm]);

  var handleOpen = function handleOpen() {
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route: scene.route },
    false);
    onOpenRoute({
      route: scene.route });

  };

  var handleClose = function handleClose() {
    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({
      route: scene.route },
    true);
    onCloseRoute({
      route: scene.route });

  };

  var handleGestureBegin = function handleGestureBegin() {
    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();
    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({
      route: scene.route });

  };

  var handleGestureCanceled = function handleGestureCanceled() {
    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({
      route: scene.route });

  };

  var handleGestureEnd = function handleGestureEnd() {
    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({
      route: scene.route });

  };

  var handleTransitionStart = function handleTransitionStart(_ref2)

  {var closing = _ref2.closing;
    if (active && closing) {
      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();
    } else {
      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();
    }

    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({
      route: scene.route },
    closing);
  };

  var insets = {
    top: safeAreaInsetTop,
    right: safeAreaInsetRight,
    bottom: safeAreaInsetBottom,
    left: safeAreaInsetLeft };var _ref3 =



  (0, require("@react-navigation/native").useTheme)(),colors = _ref3.colors;var _React$useState =
  React.useState('box-none'),_React$useState2 = _slicedToArray(_React$useState, 2),pointerEvents = _React$useState2[0],setPointerEvents = _React$useState2[1];
  React.useEffect(function () {
    var _scene$progress$next, _scene$progress$next$;


    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref4)

    {var value = _ref4.value;
      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');
    });
    return function () {
      if (listener) {
        var _scene$progress$next2, _scene$progress$next3;


        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);
      }
    };
  }, [pointerEvents, scene.progress.next]);
  var isParentHeaderShown = React.useContext(_HeaderShownContext.default);
  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;
  var previousScene = getPreviousScene({
    route: scene.route });

  return React.createElement(_Card.default, {
    index: index,
    gestureDirection: gestureDirection,
    layout: layout,
    insets: insets,
    gesture: gesture,
    current: scene.progress.current,
    next: scene.progress.next,
    closing: closing,
    onOpen: handleOpen,
    onClose: handleClose,
    overlay: cardOverlay,
    overlayEnabled: cardOverlayEnabled,
    shadowEnabled: cardShadowEnabled,
    onTransitionStart: handleTransitionStart,
    onGestureBegin: handleGestureBegin,
    onGestureCanceled: handleGestureCanceled,
    onGestureEnd: handleGestureEnd,
    gestureEnabled: gestureEnabled,
    gestureResponseDistance: gestureResponseDistance,
    gestureVelocityImpact: gestureVelocityImpact,
    transitionSpec: transitionSpec,
    styleInterpolator: cardStyleInterpolator,
    accessibilityElementsHidden: !focused,
    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
    pointerEvents: active ? 'box-none' : pointerEvents,
    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',
    containerStyle: hasAbsoluteHeader ? {
      marginTop: headerHeight } :
    null,
    contentStyle: [{
      backgroundColor: colors.background },
    cardStyle],
    style: require("react-native").StyleSheet.absoluteFill },
  React.createElement(require("react-native").View, {
    style: styles.container },
  React.createElement(require("react-native").View, {
    style: styles.scene },
  React.createElement(_PreviousSceneContext.default.Provider, {
    value: previousScene },
  React.createElement(_HeaderShownContext.default.Provider, {
    value: isParentHeaderShown || isCurrentHeaderShown },
  React.createElement(_HeaderHeightContext.default.Provider, {
    value: headerHeight },
  renderScene({
    route: scene.route }))))),
  headerMode === 'screen' ? renderHeader({
    mode: 'screen',
    layout: layout,
    insets: insets,
    scenes: [previousScene, scene],
    getPreviousScene: getPreviousScene,
    getFocusedRoute: getFocusedRoute,
    gestureDirection: gestureDirection,
    styleInterpolator: headerStyleInterpolator,
    onContentHeightChange: onHeaderHeightChange }) :
  null));
}

var _default = React.memo(CardContainer);

exports.default = _default;

var styles = require("react-native").StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column-reverse' },

  scene: {
    flex: 1 } });