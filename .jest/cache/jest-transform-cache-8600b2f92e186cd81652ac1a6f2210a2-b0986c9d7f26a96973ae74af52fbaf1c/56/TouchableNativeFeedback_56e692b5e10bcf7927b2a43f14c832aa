54cc4928ca1452eb7b05b4f819a62be2










'use strict';

var _Pressability = _interopRequireDefault(require("../../Pressability/Pressability"));


var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _TVTouchable = _interopRequireDefault(require("./TVTouchable"));

var _ViewNativeComponent = require("react-native/Libraries/Components/View/ViewNativeComponent");
var _ReactNative = _interopRequireDefault(require("react-native/Libraries/Renderer/shims/ReactNative"));

var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var React = _interopRequireWildcard(require("react"));
var _invariant = _interopRequireDefault(require("invariant"));var _jsxFileName = "/Users/valeriavianagusmao/git/store/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js";function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}var









































































TouchableNativeFeedback = function (_React$Component) {_inherits(TouchableNativeFeedback, _React$Component);var _super = _createSuper(TouchableNativeFeedback);function TouchableNativeFeedback() {var _this;_classCallCheck(this, TouchableNativeFeedback);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.




































































    state = {
      pressability: new _Pressability.default(_this._createPressabilityConfig()) };return _this;}_createClass(TouchableNativeFeedback, [{ key: "_createPressabilityConfig", value: function _createPressabilityConfig()


    {var _this2 = this;
      return {
        cancelable: !this.props.rejectResponderTermination,
        disabled: this.props.disabled,
        hitSlop: this.props.hitSlop,
        delayLongPress: this.props.delayLongPress,
        delayPressIn: this.props.delayPressIn,
        delayPressOut: this.props.delayPressOut,
        minPressDuration: 0,
        pressRectOffset: this.props.pressRetentionOffset,
        android_disableSound: this.props.touchSoundDisabled,
        onLongPress: this.props.onLongPress,
        onPress: this.props.onPress,
        onPressIn: function onPressIn(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchPressedStateChange(true);
            _this2._dispatchHotspotUpdate(event);
          }
          if (_this2.props.onPressIn != null) {
            _this2.props.onPressIn(event);
          }
        },
        onPressMove: function onPressMove(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchHotspotUpdate(event);
          }
        },
        onPressOut: function onPressOut(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchPressedStateChange(false);
          }
          if (_this2.props.onPressOut != null) {
            _this2.props.onPressOut(event);
          }
        } };

    } }, { key: "_dispatchPressedStateChange", value: function _dispatchPressedStateChange(

    pressed) {
      if (_Platform.default.OS === 'android') {
        var hostComponentRef = _ReactNative.default.findHostInstance_DEPRECATED(this);
        if (hostComponentRef == null) {
          console.warn(
          'Touchable: Unable to find HostComponent instance. ' +
          'Has your Touchable component been unmounted?');

        } else {
          _ViewNativeComponent.Commands.setPressed(hostComponentRef, pressed);
        }
      }
    } }, { key: "_dispatchHotspotUpdate", value: function _dispatchHotspotUpdate(

    event) {
      if (_Platform.default.OS === 'android') {var _event$nativeEvent =
        event.nativeEvent,locationX = _event$nativeEvent.locationX,locationY = _event$nativeEvent.locationY;
        var hostComponentRef = _ReactNative.default.findHostInstance_DEPRECATED(this);
        if (hostComponentRef == null) {
          console.warn(
          'Touchable: Unable to find HostComponent instance. ' +
          'Has your Touchable component been unmounted?');

        } else {
          _ViewNativeComponent.Commands.hotspotUpdate(
          hostComponentRef,
          locationX != null ? locationX : 0,
          locationY != null ? locationY : 0);

        }
      }
    } }, { key: "render", value: function render()

    {
      var element = React.Children.only(this.props.children);
      var children = [element.props.children];
      if (__DEV__) {
        if (element.type === _View.default) {
          children.push(
          React.createElement(_PressabilityDebug.PressabilityDebugView, { color: "brown", hitSlop: this.props.hitSlop, __self: this, __source: { fileName: _jsxFileName, lineNumber: 250, columnNumber: 11 } }));

        }
      }var _this$state$pressabil =







      this.state.pressability.getEventHandlers(),onBlur = _this$state$pressabil.onBlur,onFocus = _this$state$pressabil.onFocus,eventHandlersWithoutBlurAndFocus = _objectWithoutProperties(_this$state$pressabil, ["onBlur", "onFocus"]);

      return React.cloneElement.apply(React, [
      element, _objectSpread(_objectSpread(_objectSpread({},

      eventHandlersWithoutBlurAndFocus),
      getBackgroundProp(
      this.props.background === undefined ?
      TouchableNativeFeedback.SelectableBackground() :
      this.props.background,
      this.props.useForeground === true)), {}, {

        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityState: this.props.accessibilityState,
        accessibilityActions: this.props.accessibilityActions,
        onAccessibilityAction: this.props.onAccessibilityAction,
        accessibilityValue: this.props.accessibilityValue,
        importantForAccessibility: this.props.importantForAccessibility,
        accessibilityLiveRegion: this.props.accessibilityLiveRegion,
        accessibilityViewIsModal: this.props.accessibilityViewIsModal,
        accessibilityElementsHidden: this.props.accessibilityElementsHidden,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        hitSlop: this.props.hitSlop,
        focusable:
        this.props.focusable !== false &&
        this.props.onPress !== undefined &&
        !this.props.disabled,
        nativeID: this.props.nativeID,
        nextFocusDown: this.props.nextFocusDown,
        nextFocusForward: this.props.nextFocusForward,
        nextFocusLeft: this.props.nextFocusLeft,
        nextFocusRight: this.props.nextFocusRight,
        nextFocusUp: this.props.nextFocusUp,
        onLayout: this.props.onLayout,
        testID: this.props.testID })].concat(

      children));

    } }, { key: "componentDidMount", value: function componentDidMount()

    {var _this3 = this;
      if (_Platform.default.isTV) {
        this._tvTouchable = new _TVTouchable.default(this, {
          getDisabled: function getDisabled() {return _this3.props.disabled === true;},
          onBlur: function onBlur(event) {
            if (_this3.props.onBlur != null) {
              _this3.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_this3.props.onFocus != null) {
              _this3.props.onFocus(event);
            }
          },
          onPress: function onPress(event) {
            if (_this3.props.onPress != null) {
              _this3.props.onPress(event);
            }
          } });

      }
    } }, { key: "componentDidUpdate", value: function componentDidUpdate(

    prevProps, prevState) {
      this.state.pressability.configure(this._createPressabilityConfig());
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      if (_Platform.default.isTV) {
        if (this._tvTouchable != null) {
          this._tvTouchable.destroy();
        }
      }
      this.state.pressability.reset();
    } }]);return TouchableNativeFeedback;}(React.Component);TouchableNativeFeedback.SelectableBackground = function (rippleRadius) {return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground', rippleRadius: rippleRadius };};TouchableNativeFeedback.SelectableBackgroundBorderless = function (rippleRadius) {return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless', rippleRadius: rippleRadius };};TouchableNativeFeedback.Ripple = function (color, borderless, rippleRadius) {var processedColor = (0, _processColor.default)(color);(0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');return { type: 'RippleAndroid', color: processedColor, borderless: borderless, rippleRadius: rippleRadius };};TouchableNativeFeedback.canUseNativeForeground = function () {return _Platform.default.OS === 'android' && _Platform.default.Version >= 23;};


var getBackgroundProp =
_Platform.default.OS === 'android' ?
function (background, useForeground) {return (
    useForeground && TouchableNativeFeedback.canUseNativeForeground() ?
    { nativeForegroundAndroid: background } :
    { nativeBackgroundAndroid: background });} :
function (background, useForeground) {return null;};

module.exports = TouchableNativeFeedback;